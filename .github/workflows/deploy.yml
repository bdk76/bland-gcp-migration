name: Deploy to GCP

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  PROJECT_ID: bland-gcp-migration
  REGION: us-central1
  SERVICE_NAME: bland-api
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/bland-gcp-migration/bland-images

jobs:
  # Lint and Test Job
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || echo "No lint script found"

      - name: Run tests
        run: npm test || echo "No test script found"
        env:
          CI: true

      - name: Run security audit
        run: npm audit --audit-level=moderate || true

  # Build and Push Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
      image-url: ${{ steps.image.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

      - name: Generate image tag
        id: image
        run: |
          SHA_SHORT=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TAG="${{ env.ENVIRONMENT }}-${TIMESTAMP}-${SHA_SHORT}"
          IMAGE_URL="${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "url=${IMAGE_URL}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          echo "IMAGE_URL=${IMAGE_URL}" >> $GITHUB_ENV

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build \
            --tag ${{ env.IMAGE_URL }}:${{ env.IMAGE_TAG }} \
            --tag ${{ env.IMAGE_URL }}:${{ env.ENVIRONMENT }} \
            --tag ${{ env.IMAGE_URL }}:latest \
            --build-arg ENV=${{ env.ENVIRONMENT }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg VERSION=${{ env.IMAGE_TAG }} \
            --cache-from ${{ env.IMAGE_URL }}:${{ env.ENVIRONMENT }} \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_URL }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_URL }}:${{ env.ENVIRONMENT }}
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            docker push ${{ env.IMAGE_URL }}:latest
          fi

  # Deploy to Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development') }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            ENV="staging"
          else
            ENV="development"
          fi
          
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
          # Set service name with environment suffix
          echo "FULL_SERVICE_NAME=${{ env.SERVICE_NAME }}-$ENV" >> $GITHUB_ENV

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.FULL_SERVICE_NAME }} \
            --image ${{ needs.build.outputs.image-url }}:${{ needs.build.outputs.image-tag }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 2 \
            --memory 2Gi \
            --min-instances 1 \
            --max-instances 100 \
            --concurrency 1000 \
            --timeout 300 \
            --set-env-vars="NODE_ENV=${{ env.ENVIRONMENT }}" \
            --set-env-vars="PROJECT_ID=${{ env.PROJECT_ID }}" \
            --set-env-vars="REGION=${{ env.REGION }}" \
            --set-secrets="DATABASE_URL=database-url:latest" \
            --set-secrets="REDIS_URL=redis-url:latest" \
            --set-secrets="JWT_SECRET=jwt-secret:latest" \
            --set-secrets="BLAND_API_KEY=bland-api-key:latest" \
            --labels="environment=${{ env.ENVIRONMENT }},version=${{ needs.build.outputs.image-tag }},managed-by=github-actions" \
            --service-account=bland-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
          
          # Get the service URL
          URL=$(gcloud run services describe ${{ env.FULL_SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=${URL}" >> $GITHUB_OUTPUT
          echo "Deployed to: ${URL}"

      - name: Run smoke tests
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          echo "Running smoke tests against ${URL}"
          
          # Basic health check
          response=$(curl -s -o /dev/null -w "%{http_code}" ${URL}/health || echo "000")
          if [[ $response == "200" ]]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed with status: $response"
            exit 1
          fi

      - name: Create deployment annotation
        if: success()
        run: |
          gcloud run services update ${{ env.FULL_SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --update-annotations="deployed-by=${{ github.actor }},deployment-id=${{ github.run_id }},commit-sha=${{ github.sha }}"

  # Rollback job (manual trigger only)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && failure()
    needs: deploy
    
    steps:
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get previous revision
        id: revision
        run: |
          REVISIONS=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }}-${{ github.event.inputs.environment }} \
            --region=${{ env.REGION }} \
            --format="value(name)" \
            --limit=2)
          
          PREVIOUS=$(echo "$REVISIONS" | sed -n '2p')
          echo "previous=${PREVIOUS}" >> $GITHUB_OUTPUT

      - name: Rollback to previous revision
        if: steps.revision.outputs.previous != ''
        run: |
          gcloud run services update-traffic \
            ${{ env.SERVICE_NAME }}-${{ github.event.inputs.environment }} \
            --region=${{ env.REGION }} \
            --to-revisions=${{ steps.revision.outputs.previous }}=100

      - name: Notify rollback
        if: steps.revision.outputs.previous != ''
        run: |
          echo "🔄 Rolled back to revision: ${{ steps.revision.outputs.previous }}"

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: deploy
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Delete old images
        run: |
          # Keep only the last 10 images for each environment
          for env in production staging development; do
            echo "Cleaning up old ${env} images..."
            
            # List all images with the environment tag, sorted by creation time
            IMAGES=$(gcloud artifacts docker images list \
              ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }} \
              --filter="tags:${env}-*" \
              --sort-by=~createTime \
              --format="get(package)" \
              --limit=1000)
            
            # Skip the first 10 (most recent) and delete the rest
            echo "$IMAGES" | tail -n +11 | while read -r image; do
              if [[ ! -z "$image" ]]; then
                echo "Deleting: $image"
                gcloud artifacts docker images delete "$image" --quiet || true
              fi
            done
          done

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=✅ Deployment Successful" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "status=❌ Deployment Failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "status=⚠️ Tests Failed" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          else
            echo "status=ℹ️ Workflow Completed" >> $GITHUB_OUTPUT
            echo "color=info" >> $GITHUB_OUTPUT
          fi

      - name: Create summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
            echo "**Service URL:** ${{ needs.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
            echo "**Image Tag:** ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          fi

      # Add Slack notification if webhook is configured
      - name: Slack Notification
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '${{ steps.status.outputs.status }} - ${{ github.repository }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
